@model Model.ViewModels.SalaryWizardViewModel
@using System.Text.RegularExpressions

@{
    ViewBag.Title = "Salary Wizard";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style type="text/css">
    .grid {
        width: 1140px;
        height: 470px;
    }

    .text-right {
        text-align: right;
        /*float: right;*/
    }

    .cell-text {
        font-size:12px;
    }

    .header-text {
        font-size: 12px;
    }

    /*.ui-grid-viewport .ui-grid-cell-contents {
        word-wrap: break-word;
        white-space: normal !important;
    }

    .ui-grid-row, .ui-grid-cell {
        height: auto !important;
    }

        .ui-grid-row div[role=row] {
            display: flex;
            align-content: stretch;
        }*/

    .ui-grid-header-cell-label {
        display: inline-block;
        white-space: initial;
    }

</style>


<!doctype html>
<html ng-app="Salary">
<head>
    <title>
        UI-Grid
    </title>
    <script src="~/Scripts/angular.js"></script>
    <script src="~/Scripts/angular-touch.js"></script>
    <script src="~/Scripts/angular-animate.js"></script>
    @*<script src="http://ui-grid.info/docs/grunt-scripts/csv.js"></script>
    <script src="http://ui-grid.info/docs/grunt-scripts/pdfmake.js"></script>
    <script src="http://ui-grid.info/docs/grunt-scripts/vfs_fonts.js"></script>*@

    


    @*<script src="~/Scripts/pdfmake/pdfmake.min.js"></script>
    <script src="~/Scripts/pdfmake/vfs_fonts.js"></script>*@
    <script src="~/Scripts/Salary/Salary.js"></script>
    <script src="~/Scripts/ui-grid.js"></script>
    <link href="~/Content/ui-grid.css" rel="stylesheet" />

    <script src="~/Scripts/JSTable/jspdf.debug.js"></script>
    <script src="~/Scripts/JSTable/faker.min.js"></script>
    <script src="~/Scripts/JSTable/jspdf.plugin.autotable.js"></script>
    <script src="~/Scripts/JSTable/examples.js"></script>
</head>
<body>

    <div ng-controller="MainCtrl" data-ng-init="init()">
        <div class="panel panel-default" style="margin-bottom:0px">

            <div class="panel-heading">
                <h4>
                    <span> Salary Creation </span>
                    <input type="submit" id="Save" value="Save" ng-click="Post()" class="btn btn-primary btn-sm CurveBorder height" style="float : right ; width:5em; background-color: #2980b9" />
                    <input id="Fill" value="Fill" ng-click="BindData()" class="btn btn-primary btn-sm CurveBorder height" style="float : right ; width:5em; background-color: #2980b9; margin-right:2px" />
                    <span role="button" id="ShowFilters">
                        <span class="btn btn-primary btn-sm CurveBorder height" style="float : right ; width:5em; background-color: #2980b9; margin-right:2px" />
                        Filters
                    </span>
                </h4>
            </div>
            <form action="/" id="registerSubmit">
                <div class="panel-info" style="padding-left:15px">
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.DocTypeId)
                    @Html.HiddenFor(m => m.SalaryHeaderId)


                    <div class="form-horizontal" role="form" id="ReportFilters">
                        @Html.ValidationSummary(true)
                        <div class="panel-group" id="accordion" role="tablist" aria-multiselectable="true">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DocDate, "Month/Year", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DocDate, "{0:MMMM/yyyy}", new { @class = "datepicker form-control required", @id = "SalaryMonth" })
                                        @Html.ValidationMessageFor(model => model.DocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DepartmentId, "Department", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.DepartmentId, new { @class = "form-control col-xs-6 height" })
                                        @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.WagesPayType, "Wages Pay Type", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.DropDownListFor(m => m.WagesPayType, new SelectList(ViewBag.WagesPayTypeList as System.Collections.IEnumerable, "Value", "Text"), " ", new { @class = "form-control height" })
                                        @Html.ValidationMessageFor(model => model.WagesPayType, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Remark, "Remark", new { @class = "control-label col-md-4 col-sm-2" })
                                    <div class="col-md-7 col-sm-10">
                                        @Html.TextBoxFor(m => m.Remark, new { @class = "form-control col-xs-6 height" })
                                        @Html.ValidationMessageFor(model => model.Remark, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            <div class="col-md-offset-2 col-md-10">

                                <span style="font-family: Calibri,sans-serif,Verdana;font-size:large">
                                </span>
                            </div>
                        </div>
                    </div>

                </div>
                <div id="tableDiv"></div>
            </form>
        </div>






        
  

        <div ui-grid="gridOptions" ng-if="gridOptions" ui-grid-exporter ui-grid-resize-columns ui-grid-move-columns ui-grid-cellnav ui-grid-pinning ui-grid-edit="" class="grid" style="margin-top:0px"></div>
    </div>

</body>
</html>


<script type="text/ng-template" id="ui-grid/uiGridCell">
    <div class="ui-grid-cell-contents my-cell" ng-dblclick="grid.appScope.ShowDetail() ">{{COL_FIELD CUSTOM_FILTERS}}</div>
</script>

<script type="text/javascript">
    CustomSelectFunction($("#DepartmentId"), '/ComboHelpList/GetDepartment', '/ComboHelpList/SetSingleDepartment', ' ', false, 0);
</script>



    <script type="text/javascript">
        //$('#submit').click(function () {
        //    //GenerateDataTable();
        //    alert("Go");
        //    BindData();
        //    return false;
        //})

        //$('#submit').click(function () {
        //    GenerateDataTable();
        //    return false;
        //})

        var id=@Model.SalaryHeaderId;
        if (id>0)
        {
            $("#Fill").hide();
            $("#ShowFilters").hide();
            $("#ReportFilters").hide();
        }


        $('#Fill').click(function(){
            //$('#ReportFilters').toggle();
            //$("#ReportFilters").slideToggle();

            var div = document.getElementById('ReportFilters');
            if (div.style.display !== 'none') {
                $("#ReportFilters").toggle();
            }


        });

        $('#ShowFilters').click(function(){
            $('#ReportFilters').slideToggle();
        });


        $(document).ready(function(){
            //angular.element(document.querySelector('#Fill')).click();

            $("#SalaryMonth").datepicker({
                format: "mm/yyyy",
                startView: "year",
                minViewMode: "year"
            });

        });


        $(function () {

            $('[data-toggle="tooltip"]').tooltip({
            });


            var tdate = $("#DocDate").val();
            $("#DocDate").change(function () {

                tdate = $("#DocDate").val();
            });

            @*var students =@Html.Raw(Json.Encode(Model.ReportLine));
            var closeOnSelect='@Model.closeOnSelect';
            $.each(students, function () {

                if (this.DataType == "Multi Select"||this.DataType=="Single Select" && !(this.ListItem))
                {

                    var getFunction= '/ComboHelpList/' + this.ServiceFuncGet;
                    var setFunction= '/ComboHelpList/' + this.ServiceFuncSet;
                    var NoofChar=this.NoOfCharToEnter;
                    var elementId= '#' + this.FieldName;
                    var bool=this.DataType=="Single Select"?false:true
                    if(!this.SqlProcGetSet)
                        CustomSelectFunction($(elementId), getFunction, setFunction, ' ', bool, NoofChar);
                    else
                        CustomSelectFunction2($(elementId), getFunction, setFunction, ' ', bool, NoofChar,this.SqlProcGetSet,(closeOnSelect=='True' ? false:true ));

                    //alert(elementId+" "+getFunction+" "+setFunction)
                }
                else if(this.DataType=="Date" )
                {
                    var getFunction='/ComboHelpList/SetDate' +"?Proc="+this.SqlProcGetSet;
                    if(this.SqlProcGetSet)
                        SetDate(getFunction,'#'+this.FieldName);
                }

            });*@

            function SetDate(url,elem)
            {
                $.get(url,function(data){
                    $(elem).datepicker('update',data);
                })

            }


            $(':btn1').click(function(){

                var form=this;
                if($('input.has-error').length)
                {
                    alertify.error(message = "Please select all the mandatory fields", wait = '0')
                    return false;
                }
                $.each(students, function () {

                    if (this.DataType == "Multi Select")
                    {
                        var poarr=[];
                        var elementId='#'+this.FieldName;
                        var hiddenId= '#' + this.FieldName+'s';
                        var hiddendic= this.FieldName+'dic';
                        var products = (JSON.stringify($(elementId).select2('data')));
                        var obj = jQuery.parseJSON(products);
                        $.each(obj, function (key, value) {
                            poarr.push(value.text);
                        });
                        $(hiddenId).val(poarr);

                        for(var i=0;i<obj.length; i++)
                        {
                            var key="input[name='"+hiddendic+"["+i+"].Key']";
                            var val="input[name='"+hiddendic+"["+i+"].Value']";
                            if(!$(key).length)
                                $("<input type='hidden' name="+hiddendic+"["+i+"].Key />").val(obj[i].id).appendTo(form);
                            else
                                $(key).val(obj[i].id);

                            if(!$(val).length)
                                $("<input type='hidden' name="+hiddendic+"["+i+"].Value />").val(obj[i].text).appendTo(form);
                            else
                                $(val).val(obj[i].text);
                        }

                    }
                    if (this.DataType=="Single Select")
                    {
                        var poarr=[];
                        var elementId='#'+this.FieldName;
                        var hiddenId= '#' + this.FieldName+'s';
                        var hiddendic= '#' + this.FieldName+'dic';
                        $(hiddenId).val($(elementId).select2('data').text);
                    }

                });

            })

        });


        $('.collapse').on('hidden.bs.collapse', toggleSign);
        $('.collapse').on('shown.bs.collapse', toggleSign);

        function toggleSign(e)
        {
            $(e.target).prev('.panel-heading').find('span.collapse_Ico').toggleClass("glyphicon-plus-sign glyphicon-minus-sign")
        }

        $(document).on("mouseover",".select2-container",function(){
            $(".select2-container").tooltip({
                title: function(){
                    return $(this).next('input').attr("title");
                },
            });
        })

        $('input:checkbox').click(function(e){

            if($(e.target).is(":checked"))
            {
                $.ajax({
                    async:true,
                    type:"POST",
                    url:"/ReportLayout/SetSelectOption",
                    data:{Checked:$('#closeOnSelect').is(":checked")},
                    success:function(data)
                    {
                        if(data.success)
                            window.location.reload();
                    }
                })
            }
            else
            {
                $('select2-input').select2({
                    "closeOnSelect": true,
                });
            }

        })

    </script>
