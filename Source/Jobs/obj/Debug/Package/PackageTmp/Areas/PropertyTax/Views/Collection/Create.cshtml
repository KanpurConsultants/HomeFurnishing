@model Model.ViewModels.CollectionViewModel
@using Core.Common
@using Components.Logging

@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<!-- modal placeholder-->
<div id='myModal' class='modal fade in'>
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div id='myModalContent'></div>
        </div>
    </div>
</div>

@using (Html.BeginForm("Post", "Collection", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(m => m.SiteId)
    @Html.HiddenFor(m => m.PersonId)
    @Html.HiddenFor(m => m.Status)
    @Html.HiddenFor(m => m.DivisionId)
    @Html.HiddenFor(m => m.LedgerHeaderId)
    @Html.HiddenFor(m => m.LedgerLineId)
    @Html.HiddenFor(m => m.LedgerAccountId)
    @Html.HiddenFor(m => m.PaymentModeLedgerAccountId)
    @Html.HiddenFor(m => m.DocTypeId)
    @Html.HiddenFor(m => m.AgentDocTypeId)
    @Html.HiddenFor(m => m.CreatedDate)

    <div class="panel panel-default">
        <div class="panel-heading">

            @CustomHelpers.RenderResHeaderInfo(ViewBag.transactionType, (int?)ViewBag.PendingToSubmit, (int?)ViewBag.PendingToReview, ViewBag.Name)
            @*@if (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue")
            {<h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                <button type="submit" name="Command:Submit" class="btn btn-primary right" id="SubmitContinue" style="margin-left:5px;">Submit & Next<span class='badge'>@(ViewBag.PendingToSubmit != 0 ? ViewBag.PendingToSubmit : "")</span></button>
                <button type="submit" name="Command:Submit" class="btn btn-primary right">Submit</button>
                <input type="hidden" id="IsContinue" name="IsContinue" value="" />
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>Submit @ViewBag.Name</span>
            </h3>}
            else if (ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue")
            {<h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> Review @ViewBag.Name</span>
                <button type="submit" name="Command:Review" class="btn btn-primary right" style="margin-left:5px" id="ReviewContinue">Review & Next<span class='badge'>@(ViewBag.PendingToReview != 0 ? ViewBag.PendingToReview : "")</span></button>
                <button type="submit" class="btn btn-primary right" name="Command:Review">Review</button>
                <input type="hidden" id="IsContinue" name="IsContinue" value="" />
            </h3>}
            else if (ViewBag.transactionType == "detail")
            {
                <h3>
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span>@ViewBag.Name</span>
                </h3>
            }
            else
            {
                <h3 style="border-bottom:0px solid #e1dada;padding-bottom:0px;">
                    <span style="font-family: Calibri,sans-serif,Verdana;font-weight:bold" class="black"> <span class="glyphicon glyphicon-file black"></span> @ViewBag.Name</span>
                    <input type="submit" value="Save" class="btn btn-primary right" id="submit" style="width: 90px; background-color: #2980b9" />
                </h3>
            }*@
            <hr style="margin-top: 5px; margin-bottom: 5px; border-top: 1px solid #d8d5d5" />


            @{
                string EditAction = "";
                if (Model.Status == (int)StatusConstants.Drafted || Model.Status == (int)StatusConstants.Import)
                {
                    EditAction = "Modify";
                }
                else if ((Model.Status == (int)StatusConstants.Submitted || Model.Status == (int)StatusConstants.Modified))
                {
                    EditAction = "ModifyAfter_Submit";
                }
                else
                {
                    EditAction = "DetailInformation";
                }
            }
            <div class="panel-info">             
                <div class="btn-group">
                    @Html.ActionLink(" ", "Create", "Collection", new { @id = ViewBag.id, @PersonId = @Model.PersonId }, new { @class = "cbtn btn-circle glyphicon glyphicon-plus toolbar", @title = "Add New", @data_toggle = "tooltip", target = "" })
                    @Html.ActionLink(" ", EditAction, "Collection", new { @id = Model.LedgerHeaderId, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-edit", @title = "Edit", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "GeneratePrints", "Collection", new { Ids = Model.LedgerHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-print toolbar", @title = "Print", @data_toggle = "tooltip", @id = "PrintRecordC", target = "_blank" })
                    @Html.ActionLink(" ", "PrevPage", "Collection", new { DocId = @Model.LedgerHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-left toolbar", @title = "Prev Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "NextPage", "Collection", new { DocId = @Model.LedgerHeaderId, DocTypeId = Model.DocTypeId }, new { @class = "cbtn btn-circle glyphicon glyphicon-arrow-right toolbar", @title = "Next Record", @data_toggle = "tooltip" })
                    @Html.ActionLink(" ", "Index", "Collection", new { id = ViewBag.id, PersonId = @Model.PersonId, IndexType = ViewBag.IndexStatus }, new { @class = "cbtn btn-circle glyphicon glyphicon-list toolbar", @title = "List", @data_toggle = "tooltip" })
                </div>
                <div class="btn-group">
                    <a class="cbtn btn-circle glyphicon glyphicon-option-horizontal dropdown-toggle" aria-expanded="false" style="padding-top: 6px;padding-bottom: 6px;" href="#" data-toggle="dropdown" id="dropdownMenu1">
                    </a>
                    <ul class="dropdown-menu pull-right" aria-labelledby="dropdownMenu1">
                        <li><a id="DocHistory" data-modal="" href="@Url.Action("GetHistory", "LogHistory", new { Ids = Model.LedgerHeaderId, DocTypeId = Model.DocTypeId })"><span class="glyphicon glyphicon-user"> </span> History</a></li>
                        @*<li><a href="@Url.Action("Email", "Collection")"><span class="glyphicon glyphicon-envelope"> </span> Email</a></li>*@
                        @*<li role="separator" class="divider"></li>
                        <li><a href="@Url.Action("Report", "Collection")"><span class="glyphicon glyphicon-th"> </span> Report</a></li>*@
                    </ul>
                </div>
            </div>
           

        </div>

        <div class="panel-info" style="padding-left:15px">

            <div class="form-horizontal">

                @Html.ValidationSummary(true)
                <div class="row">
                    <h4 class="col-md-12 black">
                        <span class="glyphicon glyphicon-align-justify"></span>
                        1.Property Details
                    </h4>
                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.Code, "Property Id", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.Code, null, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.Code, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.GodownId, "Ward No.", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.GodownId, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.GodownId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BinLocationId, "Chak No.", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.BinLocationId, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.BinLocationId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.HouseNo, "House No.", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.HouseNo, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(model => model.HouseNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AreaId, "Area", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.AreaId, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.AreaId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Name, "Owner Name", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.Name, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FatherName, "Father/Husband Name", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.FatherName, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(model => model.FatherName, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TotalPropertyArea, "Total Propery Area", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.TotalPropertyArea, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(model => model.TotalPropertyArea, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TotalTaxableArea, "Total Taxable Area", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.TotalTaxableArea, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(model => model.TotalTaxableArea, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TotalARV, "Total ARV", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.TotalARV, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(model => model.TotalARV, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.TotalTax, "Total Tax", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.TotalTax, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(model => model.TotalTax, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                        </div>
                    </div>
                </div>



                <hr />

                <div class="row">
                    <h4 class="col-md-12 black" style="margin-top:15px">
                        <span class="glyphicon glyphicon-shopping-cart"></span>
                        2.Receipt Detail
                    </h4>

                    <div>
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocDate, "Receipt Date", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DocDate, "{0:dd/MMMM/yyyy}", new { @class = "datepickerWithNFD form-control col-xs-6 required" })
                                        @Html.ValidationMessageFor(m => m.DocDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group" style="margin-top:15px">
                                    @Html.LabelFor(model => model.DocNo, "Auto Receipt No.", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DocNo, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.DocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PartyDocNo, "Manual Receipt No.", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.PartyDocNo, new { @class = "form-control col-xs-6 " })
                                        @Html.ValidationMessageFor(m => m.PartyDocNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.CollectionSettings.IsVisibleIntrestBalance?"":"none")">
                                @Html.HiddenFor(m => m.CollectionSettings.IsVisibleIntrestBalance)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.IntrestBalance, "Interest Balance", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.IntrestBalance, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.IntrestBalance, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.CollectionSettings.IsVisibleArearBalance?"":"none")">
                                @Html.HiddenFor(m => m.CollectionSettings.IsVisibleArearBalance)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ArearBalance, "Arear Balance", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.ArearBalance, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(model => model.ArearBalance, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.CollectionSettings.IsVisibleExcessBalance?"":"none")">
                                @Html.HiddenFor(m => m.CollectionSettings.IsVisibleExcessBalance)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ExcessBalance, "Excess Balance", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.ExcessBalance, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.ExcessBalance, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.CollectionSettings.IsVisibleCurrentYearBalance?"":"none")">
                                @Html.HiddenFor(m => m.CollectionSettings.IsVisibleCurrentYearBalance)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.CurrentYearBalance, "Current Year Balance", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.CurrentYearBalance, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(m => m.CurrentYearBalance, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.CollectionSettings.IsVisibleNetOutstanding?"":"none")">
                                @Html.HiddenFor(m => m.CollectionSettings.IsVisibleNetOutstanding)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NetOutstanding, "Net Outstanding", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.NetOutstanding, new { @class = "form-control col-xs-6 ", @readonly = "true" })
                                        @Html.ValidationMessageFor(model => model.NetOutstanding, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                            <div class="col-md-6" style="display:@(Model.CollectionSettings.IsVisibleReason?"":"none")">
                                @Html.HiddenFor(m => m.CollectionSettings.IsVisibleReason)
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReferenceLedgerAccountId, "Reason", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.ReferenceLedgerAccountId, new { @class = "form-control col-xs-6 " })
                                        @Html.ValidationMessageFor(model => model.ReferenceLedgerAccountId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.DiscountAmount, "Discount", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.DiscountAmount, new { @class = "form-control col-xs-6 " })
                                        @Html.ValidationMessageFor(model => model.DiscountAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ReceivedAmount, "Received Amount", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.ReceivedAmount, new { @class = "form-control col-xs-6 required" })
                                        @Html.ValidationMessageFor(model => model.ReceivedAmount, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.PaymentModeId, "Payment Mode", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.PaymentModeId, new { @class = "form-control col-xs-6 required" })
                                        @Html.ValidationMessageFor(model => model.PaymentModeId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.AgentId, "Inspector", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.AgentId, new { @class = "form-control col-xs-6 " })
                                        @Html.ValidationMessageFor(model => model.AgentId, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ChqNo, "Chq/Ref No.", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.ChqNo, new { @class = "form-control col-xs-6 " })
                                        @Html.ValidationMessageFor(model => model.ChqNo, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>

                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.ChqDate, "Chq/Ref Date", new { @class = "control-label col-xs-4" })
                                    <div class="col-xs-6">
                                        @Html.TextBoxFor(m => m.ChqDate, "{0:dd/MMMM/yyyy}", new { @class = "datepickerWithNFD form-control col-xs-6 " })
                                        @Html.ValidationMessageFor(model => model.ChqDate, "", new { @class = "text-danger" })
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}


@if ((ViewBag.Mode == "Add") || (ViewBag.Mode == "Edit"))
{

    <script type="text/javascript">

        //Reloading the table contents on modal hide
        //$('#myModal').on('hidden.bs.modal', function () {
        //    window.location.reload();
        //});



        //For Populating Modal PopUp on DoubleClick Of Row
        $('#gbody').on("dblclick",'.grid-body',function(){
            var editurl=$(this).find('a[edit]').attr('href');
            $('#myModalContent').load(editurl, function () {
                //alert('2');
                $('#myModal').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');

                bindForm1(this);
            });
        });


        //For Handling Modal PopUp on Clicking Delete Icon
        $('#gbody').on("click",'a[delete]', function (e) {
            $('#myModalContent').load(this.href, function () {
                //alert('2');
                $('#myModal').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');

                bindForm1(this);
            });
            return false;
        });

        //For Handling Modal PopUp on Clicking Delete Icon
        $('#gbody').on("click",'a[Detail]', function (e) {
            $('#myModalContent').load(this.href, function (response, status, xhr) {
                //alert('2');
                if ( status == "error" ) {
                    var msg = "Sorry but there was an error: ";
                }
                else
                {
                    $('#myModal').modal({
                        backdrop: 'static',
                        keyboard: true
                    }, 'show');

                    bindForm1(this);}
            });
            return false;
        });






        //For posting the data through ajax and render the contents sent back from the server
        function bindForm1(dialog) {
            //alert("binding1");
            $('form#modform', dialog).submit(function () {
                $.ajax({
                    url: this.action,
                    type: this.method,
                    data:$(this).serialize(),
                    success: function (result) {
                        if (result.success) {
                            $('#myModal').modal('hide');
                            //Refresh
                            //location.reload();
                            //alert('Data Saved');
                        }else if(!result.success)
                        {//alert('Data Saved1');
                            $('#myModalContent').html(result);
                            bindForm1();
                        }
                        else {
                            //alert('Data Saved2');
                            $('#myModalContent').html(result);
                            bindForm1();
                        }
                    },
                });
                return false;
            });

        }

        $(function () {

            $.ajaxSetup({ cache: false });

            $("a[data-modalCustom]").on("click", function (e) {
                // hide dropdown if any
                if(this.href=="")
                {
                    return false;
                }
                //alert(' Script');
                $('#myModalContent').load(this.href, function () {
                    $('#myModal').modal({
                        backdrop: 'static',
                        keyboard: true
                    }, 'show');

                    bindForm1(this);
                });

                return false;
            });
        });



        var IsSaved=false;
        var ValidationCount=0;

        $('form').submit(function(event){

            if(!IsSaved)
            {
                //if(!ValidateData() || !ValidateCostCenter())
                if(!ValidateData())
                {
                    return false;
                }
                IsSaved=true;
                return IsSaved;
            }
            else
            {
                return false;
            }


        });


        function ValidateData() {
            var DocId=@Model.LedgerHeaderId;
            var TempValue;
            var ValidationMessage="";



            //Checking for dulicate key value
            if(DocId<=0)
            {
                TempValue= $('#Code').DuplicateCheckForCreate({value: $('#Code').val(), doctype: $('#DocTypeId').val(), url:'/Collection/DuplicateCheckForCreate/' });
                if (TempValue){ ValidationMessage=$('#DocNo').val() + " already exist <br />";}
            }
            else
            {
                TempValue = $('#Code').DuplicateCheckForEdit({ value: $('#Code').val(), doctype: $('#DocTypeId').val(),headerId:DocId, url: '/Collection/DuplicateCheckForEdit/' });
                if (TempValue) {ValidationMessage+=$('#DocNo').val() + " already exist <br />";}
            }
            if(TempValue)
            {
                if($('#validationerrormsg').length==0){
                    $('.panel-info').filter(':eq(1)').before('<div class="alert alert-danger" role="alert" id="validationerrormsg">'+ValidationMessage+'</div>');}
                else
                {
                    $('#validationerrormsg').html(ValidationMessage);
                }
            }

            return  (ValidationMessage=="");
        }




    </script>

}


<script type="text/javascript">


    $(document).ready(function () {
        var id=@Model.LedgerHeaderId;
        var DocTypeId=@Model.DocTypeId;
        if(id==null||id==0)
        {
            $(document).find('a#btnCreateF').removeAttr('href').removeAttr('data-modal');
            $(document).find('a#btnCreate').removeAttr('href').removeAttr('data-modal');
            $(document).find('a#btnCreatePO').removeAttr('href').removeAttr('data-modal');
        }

        $(document).ajaxStart(function () {
            if ($(':submit', 'div.modal-content').length)
                $(':submit', 'div.modal-content').attr("disabled", 'disabled');
            return;
        });

        $(document).ajaxStop(function () {
            if ($(':submit', 'div.modal-content').length)
                $(':submit', 'div.modal-content').removeAttr("disabled");
            return;
        });


        CustomSelectFunction($("#ParentId"), '/ComboHelpList/GetPersonwithDocType', '/ComboHelpList/SetSinglePerson', ' ', false, 0,$('#DocTypeId').val());
        CustomSelectFunction($("#GodownId"), '/ComboHelpList/GetGodown', '/ComboHelpList/SetSingleGodown', ' ', false, 0);
        CustomSelectFunction($("#BinLocationId"), '/ComboHelpList/GetBinLocation', '/ComboHelpList/SetSingleBinLocation', ' ', false, 0);
        CustomSelectFunction($("#AreaId"), '/ComboHelpList/GetArea', '/ComboHelpList/SetSingleArea', ' ', false, 0);
        CustomSelectFunction($("#CasteId"), '/ComboHelpList/GetCaste', '/ComboHelpList/SetSingleCaste', ' ', false, 0);
        CustomSelectFunction($("#ReligionId"), '/ComboHelpList/GetReligion', '/ComboHelpList/SetSingleReligion', ' ', false, 0);
        CustomSelectFunction($("#PersonRateGroupId"), '/ComboHelpList/GetPersonRateGroup', '/ComboHelpList/SetSinglePersonRateGroup', ' ', false, 0);
        CustomSelectFunction($("#PaymentModeId"), '/ComboHelpList/GetPaymentMode', '/ComboHelpList/SetSinglePaymentMode', ' ', false, 0);
        CustomSelectFunction($("#AgentId"), '/ComboHelpList/GetPersonWithDocType', '/ComboHelpList/SetSinglePerson', ' ', false,0, $('#AgentDocTypeId').val());
        CustomSelectFunction($("#ReferenceLedgerAccountId"), '/Collection/GetReasonAccount', '/ComboHelpList/SetSingleLedgerAccount', ' ', false,0);

        //$("#Code").select2('focus');

        $("#PartyDocNo").focus();


        //Calling the function to load the table data/ Line information

        //Adding Hidden Input Fields
        AddFields();


        GetIntrestBalance();
        GetArearBalance();
        GetExcessBalance();
        GetCurrentYearBalance();
        GetNetOutstanding();

    });







    var id=@Model.LedgerHeaderId;

    if(id>0)
    {
        $('#ReceivedAmount').attr('readonly','true');
        $('#PaymentModeId').attr('readonly','true');
    }


    function GetIntrestBalance() {
        var ProcessProgress = $("#Prod Order detail loading progress");
        ProcessProgress.show();
            $.ajax({
                cache: false,
                type: "POST",
                url: "@(Url.Action("GetIntrestBalanceJson"))",
                data: { PersonId: $("#PersonId").val()},
            success: function (data) {
                if (data != null){
                    $("#IntrestBalance").val(data);
                }
                else{
                    $("#IntrestBalance").val(0);
                }
            },
            error: function (xhr, ajaxOptions, thrownError) {
                alert('Failed to retrieve Prod Order details.' + thrownError);
                ProcessProgress.hide();
            }
        });
    }

    function GetArearBalance() {
        var ProcessProgress = $("#Prod Order detail loading progress");
        ProcessProgress.show();
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("GetArearBalanceJson"))",
            data: { PersonId: $("#PersonId").val()},
        success: function (data) {
            if (data != null){
                $("#ArearBalance").val(data);
            }
            else{
                $("#ArearBalance").val(0);
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            alert('Failed to retrieve Prod Order details.' + thrownError);
            ProcessProgress.hide();
        }
    });
    }

    function GetExcessBalance() {
        var ProcessProgress = $("#Prod Order detail loading progress");
        ProcessProgress.show();
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("GetExcessBalanceJson"))",
            data: { PersonId: $("#PersonId").val()},
        success: function (data) {
            if (data != null){
                $("#ExcessBalance").val(data);
            }
            else{
                $("#ExcessBalance").val(0);
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            alert('Failed to retrieve Prod Order details.' + thrownError);
            ProcessProgress.hide();
        }
    });
    }

    function GetCurrentYearBalance() {
        var ProcessProgress = $("#Prod Order detail loading progress");
        ProcessProgress.show();
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("GetCurrentYearBalanceJson"))",
            data: { PersonId: $("#PersonId").val()},
        success: function (data) {
            if (data != null){
                $("#CurrentYearBalance").val(data);
            }
            else{
                $("#CurrentYearBalance").val(0);
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            alert('Failed to retrieve Prod Order details.' + thrownError);
            ProcessProgress.hide();
        }
    });
    }

    function GetNetOutstanding() {
        var ProcessProgress = $("#Prod Order detail loading progress");
        ProcessProgress.show();
        $.ajax({
            cache: false,
            type: "POST",
            url: "@(Url.Action("GetNetOutstandingJson"))",
            data: { PersonId: $("#PersonId").val()},
        success: function (data) {
            if (data != null){
                $("#NetOutstanding").val(data);
            }
            else{
                $("#NetOutstanding").val(0);
            }
        },
        error: function (xhr, ajaxOptions, thrownError) {
            alert('Failed to retrieve Prod Order details.' + thrownError);
            ProcessProgress.hide();
        }
    });
    }





</script>


@if ((ViewBag.Mode != "Add") && (ViewBag.Mode != "Edit"))
{
    <script type="text/javascript">

        RemoveFields();

        function RemoveFields(){
            //Disabling input fields
            $(':input:not(:submit,#IsContinue)').attr('disabled','disabled');

            //Removing all the events from the newly created lines
            $('#gbody').unbind();

            //Removing Add New Row ActionLink
            if($('a#btnCreate').length)
                $('a#btnCreate').parents('h5')[0].remove();
            if($('a#btnCreatePO').length)
                $('a#btnCreatePO').parents('h5')[0].remove();
            //Preventing the click event on newly created elements
            $(document).on('click','#gbody a[edit],#gbody a[delete],#gbodyconsumption a',function(event){
                event.preventDefault();
            })
            //Removing the action link from the form so that the request will be redirected to the Submit function in the controller instead of the hardcoded path
            $('form:last').prop('action','');

            //For Populating Modal PopUp on DoubleClick Of Row
            //$('#gbody').on("dblclick",'.grid-body',function(){
            //    var editurl=$(this).find('a[edit]').attr('href');
            //    $('#myModalContent').load(editurl, function () {
            //        //alert('2');
            //        $('#myModal').modal({
            //            backdrop: 'static',
            //            keyboard: true
            //        }, 'show');
            //    });
            //});
        }


    </script>
}

@if ((Model.Status == (int)ActivityTypeContants.Modified || Model.Status == (int)ActivityTypeContants.Submitted)
    && (ViewBag.transactionType == "submit" || ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "review" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">

        var TrancType='@ViewBag.transactionType'

        var href = '/ActivityLog/LogEditReason';

        var $btnClicked;

        $(':submit').bind('click', function () {
            $btnClicked=$(this);
            $('#myModalContent').load(href, function () {

                $('#myModal').modal({
                    backdrop: 'static',
                    keyboard: true
                }, 'show');

                bindForm1(this);
            });

            return false;
        })

        function bindForm1(dialog) {

            $('#modformr', dialog).submit(function () {

                $.ajax({
                    url: this.action,
                    type: this.method,
                    data: $(this).serialize(),
                    success: function (result) {
                        if (result.success) {
                            $('#myModal').modal('hide');

                            $(':submit').unbind();

                            $('input[name="UserRemark"]').val(result.UserRemark);

                            if(GatePassGen && !GatePassId && (TrancType=="submit"||TrancType=="submitContinue"))
                            {
                                alertify.confirm('Generate GatePass ?').set({
                                    'closable': false, 'onok': function (onok) {

                                        $('input[name="GenGatePass"]').val('true');
                                        $btnClicked.trigger('click');

                                    }, 'oncancel': function (oncancel) {

                                        $('input[name="GenGatePass"]').val('false');
                                        $btnClicked.trigger('click');

                                    }
                                }).setting('labels',{'ok':'Yes', 'cancel': 'No'});
                            }
                            else
                            {
                                $btnClicked.trigger('click');
                            }
                        } else {
                            $('#myModalContent').html(result);
                            bindForm1();
                        }
                    }
                });
                return false;
            });

        }

    </script>
}



@if (ViewBag.transactionType != null && (ViewBag.transactionType == "submitContinue" || ViewBag.transactionType == "ReviewContinue"))
{
    <script type="text/javascript">
        CreateTrasitionEffectForSubmit();

        function CreateTrasitionEffectForSubmit() {

            //$('body').find('.container.body-content > div.row ').wrap("<div class='animsition' data-animsition-in='fade-in-right-lg' data-animsition-out='fade-out-left-lg' style='animation-duration: 1.5s; -webkit-animation-duration: 1.5s; opacity: 0;'> </div>");

            $('body').find('form').filter(":last").wrapInner("<div class='animsition' data-animsition-in='fade-in-right-lg' data-animsition-out='fade-out-left-lg' style='animation-duration: 1.5s; -webkit-animation-duration: 1.5s; opacity: 0;'> </div>");

            var script = document.createElement('script');

            script.setAttribute('type', 'text/javascript');

            script.text = " $(document).ready(function () {$('.animsition').animsition().one('animsition.start', function () {}).one('animsition.end', function () {$(this).find('.animsition-child').addClass('zoom-in').css({'opacity': 1});})});";

            $('body').append(script);

        }

    </script>
}